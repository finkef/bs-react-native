// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Js_boolean = require("bs-platform/lib/js/js_boolean.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var UtilsRN$BsReactNative = require("./private/utilsRN.js");

function combine(a, b) {
  return UtilsRN$BsReactNative.dictFromArray($$Array.append(UtilsRN$BsReactNative.dictEntries(a), UtilsRN$BsReactNative.dictEntries(b)));
}

var concat = $$Array.of_list;

function pctStyle(key, value) {
  return /* StringStyle */Block.__(2, [
            key,
            Pervasives.string_of_float(value) + "%"
          ]);
}

function animatedStyle(key, value) {
  return /* AnimatedStyle */Block.__(6, [
            key,
            /* `value */[
              834174833,
              value
            ]
          ]);
}

function interpolatedStyle(key, value) {
  return /* AnimatedStyle */Block.__(6, [
            key,
            /* `interpolation */[
              -249188060,
              value
            ]
          ]);
}

function encodeStyle(param) {
  switch (param.tag | 0) {
    case 1 : 
        return /* tuple */[
                param[0],
                Js_boolean.to_js_boolean(param[1])
              ];
    case 6 : 
        return /* tuple */[
                param[0],
                param[1][1]
              ];
    default:
      return /* tuple */[
              param[0],
              param[1]
            ];
  }
}

function style(sarr) {
  return UtilsRN$BsReactNative.dictFromList(List.map(encodeStyle, sarr));
}

function alignContent(v) {
  return /* StringStyle */Block.__(2, [
            "alignContent",
            v >= 98248149 ? (
                v >= 662439529 ? (
                    v >= 924268066 ? "flex-end" : "flex-start"
                  ) : (
                    v >= 516682146 ? "space-between" : "center"
                  )
              ) : (
                v >= -162316795 ? "stretch" : "space-around"
              )
          ]);
}

function alignItems(v) {
  return /* StringStyle */Block.__(2, [
            "alignItems",
            v !== 98248149 ? (
                v >= 662439529 ? (
                    v >= 924268066 ? "flex-end" : "flex-start"
                  ) : (
                    v >= 287825029 ? "baseline" : "stretch"
                  )
              ) : "center"
          ]);
}

function alignSelf(v) {
  return /* StringStyle */Block.__(2, [
            "alignSelf",
            v !== 98248149 ? (
                v >= 662439529 ? (
                    v >= 924268066 ? "flex-end" : "flex-start"
                  ) : (
                    v >= 287825029 ? "baseline" : "stretch"
                  )
              ) : "center"
          ]);
}

function aspectRatio(param) {
  return /* FloatStyle */Block.__(4, [
            "aspectRatio",
            param
          ]);
}

function borderBottomWidth(param) {
  return /* FloatStyle */Block.__(4, [
            "borderBottomWidth",
            param
          ]);
}

function borderLeftWidth(param) {
  return /* FloatStyle */Block.__(4, [
            "borderLeftWidth",
            param
          ]);
}

function borderRightWidth(param) {
  return /* FloatStyle */Block.__(4, [
            "borderRightWidth",
            param
          ]);
}

function borderTopWidth(param) {
  return /* FloatStyle */Block.__(4, [
            "borderTopWidth",
            param
          ]);
}

function borderWidth(param) {
  return /* FloatStyle */Block.__(4, [
            "borderWidth",
            param
          ]);
}

function bottom(param) {
  return /* FloatStyle */Block.__(4, [
            "bottom",
            param
          ]);
}

function bottomPct(param) {
  return pctStyle("bottom", param);
}

function bottomAnimated(param) {
  return animatedStyle("bottom", param);
}

function bottomInterpolated(param) {
  return interpolatedStyle("bottom", param);
}

function display(v) {
  return /* StringStyle */Block.__(2, [
            "display",
            v >= -922086728 ? "none" : "flex"
          ]);
}

function flex(param) {
  return /* FloatStyle */Block.__(4, [
            "flex",
            param
          ]);
}

function flexBasis(param) {
  return /* FloatStyle */Block.__(4, [
            "flexBasis",
            param
          ]);
}

function flexBasisPct(param) {
  return pctStyle("flexBasis", param);
}

function flexDirection(v) {
  return /* StringStyle */Block.__(2, [
            "flexDirection",
            v >= 135477484 ? (
                v >= 378951208 ? "row-reverse" : "column-reverse"
              ) : (
                v >= 5693978 ? "row" : "column"
              )
          ]);
}

function flexGrow(param) {
  return /* FloatStyle */Block.__(4, [
            "flexGrow",
            param
          ]);
}

function flexShrink(param) {
  return /* FloatStyle */Block.__(4, [
            "flexShrink",
            param
          ]);
}

function flexWrap(v) {
  return /* StringStyle */Block.__(2, [
            "flexWrap",
            v >= 867913355 ? "nowrap" : "wrap"
          ]);
}

function height(param) {
  return /* FloatStyle */Block.__(4, [
            "height",
            param
          ]);
}

function heightPct(param) {
  return pctStyle("height", param);
}

function heightAnimated(param) {
  return animatedStyle("height", param);
}

function heightInterpolated(param) {
  return interpolatedStyle("height", param);
}

function justifyContent(v) {
  return /* StringStyle */Block.__(2, [
            "justifyContent",
            v >= 98248149 ? (
                v >= 662439529 ? (
                    v >= 924268066 ? "flex-end" : "flex-start"
                  ) : (
                    v >= 516682146 ? "space-between" : "center"
                  )
              ) : (
                v >= -162316795 ? "stretch" : "space-around"
              )
          ]);
}

function left(param) {
  return /* FloatStyle */Block.__(4, [
            "left",
            param
          ]);
}

function leftPct(param) {
  return pctStyle("left", param);
}

function leftAnimated(param) {
  return animatedStyle("left", param);
}

function leftInterpolated(param) {
  return interpolatedStyle("left", param);
}

function margin(param) {
  return /* FloatStyle */Block.__(4, [
            "margin",
            param
          ]);
}

function marginBottom(param) {
  return /* FloatStyle */Block.__(4, [
            "marginBottom",
            param
          ]);
}

function marginHorizontal(param) {
  return /* FloatStyle */Block.__(4, [
            "marginHorizontal",
            param
          ]);
}

function marginLeft(param) {
  return /* FloatStyle */Block.__(4, [
            "marginLeft",
            param
          ]);
}

function marginRight(param) {
  return /* FloatStyle */Block.__(4, [
            "marginRight",
            param
          ]);
}

function marginTop(param) {
  return /* FloatStyle */Block.__(4, [
            "marginTop",
            param
          ]);
}

function marginTopInterpolated(param) {
  return interpolatedStyle("marginTop", param);
}

function marginVertical(param) {
  return /* FloatStyle */Block.__(4, [
            "marginVertical",
            param
          ]);
}

function maxHeight(param) {
  return /* FloatStyle */Block.__(4, [
            "maxHeight",
            param
          ]);
}

function maxHeightPct(param) {
  return pctStyle("maxHeight", param);
}

function maxWidth(param) {
  return /* FloatStyle */Block.__(4, [
            "maxWidth",
            param
          ]);
}

function maxWidthPct(param) {
  return pctStyle("maxHeight", param);
}

function minHeight(param) {
  return /* FloatStyle */Block.__(4, [
            "minHeight",
            param
          ]);
}

function minHeightPct(param) {
  return pctStyle("minHeight", param);
}

function minWidth(param) {
  return /* FloatStyle */Block.__(4, [
            "minWidth",
            param
          ]);
}

function minWidthPct(param) {
  return pctStyle("minWidth", param);
}

function overflow(v) {
  return /* StringStyle */Block.__(2, [
            "overflow",
            v !== -862584982 ? (
                v >= 589592690 ? "visible" : "scroll"
              ) : "hidden"
          ]);
}

function padding(param) {
  return /* FloatStyle */Block.__(4, [
            "padding",
            param
          ]);
}

function paddingBottom(param) {
  return /* FloatStyle */Block.__(4, [
            "paddingBottom",
            param
          ]);
}

function paddingHorizontal(param) {
  return /* FloatStyle */Block.__(4, [
            "paddingHorizontal",
            param
          ]);
}

function paddingLeft(param) {
  return /* FloatStyle */Block.__(4, [
            "paddingLeft",
            param
          ]);
}

function paddingRight(param) {
  return /* FloatStyle */Block.__(4, [
            "paddingRight",
            param
          ]);
}

function paddingTop(param) {
  return /* FloatStyle */Block.__(4, [
            "paddingTop",
            param
          ]);
}

function paddingVertical(param) {
  return /* FloatStyle */Block.__(4, [
            "paddingVertical",
            param
          ]);
}

function position(v) {
  return /* StringStyle */Block.__(2, [
            "position",
            v >= 903134412 ? "relative" : "absolute"
          ]);
}

function right(param) {
  return /* FloatStyle */Block.__(4, [
            "right",
            param
          ]);
}

function rightPct(param) {
  return pctStyle("right", param);
}

function rightAnimated(param) {
  return animatedStyle("right", param);
}

function rightInterpolated(param) {
  return interpolatedStyle("right", param);
}

function top(param) {
  return /* FloatStyle */Block.__(4, [
            "top",
            param
          ]);
}

function topPct(param) {
  return pctStyle("top", param);
}

function topAnimated(param) {
  return animatedStyle("top", param);
}

function topInterpolated(param) {
  return interpolatedStyle("top", param);
}

function width(param) {
  return /* FloatStyle */Block.__(4, [
            "width",
            param
          ]);
}

function widthPct(param) {
  return pctStyle("width", param);
}

function widthAnimated(param) {
  return animatedStyle("width", param);
}

function widthInterpolated(param) {
  return interpolatedStyle("width", param);
}

function zIndex(param) {
  return /* IntStyle */Block.__(3, [
            "zIndex",
            param
          ]);
}

function direction(v) {
  return /* StringStyle */Block.__(2, [
            "direction",
            v !== 5396714 ? (
                v >= 5695082 ? "rtl" : "inherit"
              ) : "ltr"
          ]);
}

function shadowColor(param) {
  return /* StringStyle */Block.__(2, [
            "shadowColor",
            param
          ]);
}

function shadowOffset(height, width) {
  return /* ObjectStyle */Block.__(5, [
            "shadowOffset",
            UtilsRN$BsReactNative.dictFromArray(/* array */[
                  /* tuple */[
                    "height",
                    height
                  ],
                  /* tuple */[
                    "width",
                    width
                  ]
                ])
          ]);
}

function shadowOpacity(param) {
  return /* FloatStyle */Block.__(4, [
            "shadowOpacity",
            param
          ]);
}

function shadowRadius(param) {
  return /* FloatStyle */Block.__(4, [
            "shadowRadius",
            param
          ]);
}

function createTransformObject(perspective, rotate, rotateX, rotateY, rotateZ, scaleX, scaleY, translateX, translateY, skewX, skewY) {
  var opt_values_000 = /* tuple */[
    "perspective",
    perspective
  ];
  var opt_values_001 = /* :: */[
    /* tuple */[
      "rotate",
      rotate
    ],
    /* :: */[
      /* tuple */[
        "rotateX",
        rotateX
      ],
      /* :: */[
        /* tuple */[
          "rotateY",
          rotateY
        ],
        /* :: */[
          /* tuple */[
            "rotateZ",
            rotateZ
          ],
          /* :: */[
            /* tuple */[
              "scaleX",
              scaleX
            ],
            /* :: */[
              /* tuple */[
                "scaleY",
                scaleY
              ],
              /* :: */[
                /* tuple */[
                  "translateX",
                  translateX
                ],
                /* :: */[
                  /* tuple */[
                    "translateY",
                    translateY
                  ],
                  /* :: */[
                    /* tuple */[
                      "skewX",
                      skewX
                    ],
                    /* :: */[
                      /* tuple */[
                        "skewY",
                        skewY
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ];
  var opt_values = /* :: */[
    opt_values_000,
    opt_values_001
  ];
  var values = List.fold_right((function (x, acc) {
          var match = x[1];
          if (match) {
            var val_ = UtilsRN$BsReactNative.dictFromArray(/* array */[/* tuple */[
                    x[0],
                    match[0]
                  ]]);
            return /* :: */[
                    val_,
                    acc
                  ];
          } else {
            return acc;
          }
        }), opt_values, /* [] */0);
  return /* ArrayStyle */Block.__(0, [
            "transform",
            $$Array.of_list(values)
          ]);
}

function transform(perspective, rotate, rotateX, rotateY, rotateZ, scaleX, scaleY, translateX, translateY, skewX, skewY, _) {
  return createTransformObject(UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), perspective), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), rotate), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), rotateX), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), rotateY), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), rotateZ), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), scaleX), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), scaleY), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), translateX), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), translateY), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), skewX), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), skewY));
}

function transformAnimated(perspective, rotate, rotateX, rotateY, rotateZ, scaleX, scaleY, translateX, translateY, skewX, skewY, _) {
  return createTransformObject(UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), perspective), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), rotate), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), rotateX), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), rotateY), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), rotateZ), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), scaleX), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), scaleY), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), translateX), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), translateY), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), skewX), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), skewY));
}

function transformInterpolated(perspective, rotate, rotateX, rotateY, rotateZ, scaleX, scaleY, translateX, translateY, skewX, skewY, _) {
  return createTransformObject(UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), perspective), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), rotate), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), rotateX), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), rotateY), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), rotateZ), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), scaleX), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), scaleY), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), translateX), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), translateY), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), skewX), UtilsRN$BsReactNative.option_map((function (prim) {
                    return prim;
                  }), skewY));
}

function backfaceVisibility(v) {
  return /* StringStyle */Block.__(2, [
            "backfaceVisibility",
            v >= 589592690 ? "visible" : "hidden"
          ]);
}

function backgroundColor(param) {
  return /* StringStyle */Block.__(2, [
            "backgroundColor",
            param
          ]);
}

function borderColor(param) {
  return /* StringStyle */Block.__(2, [
            "borderColor",
            param
          ]);
}

function borderTopColor(param) {
  return /* StringStyle */Block.__(2, [
            "borderTopColor",
            param
          ]);
}

function borderRightColor(param) {
  return /* StringStyle */Block.__(2, [
            "borderRightColor",
            param
          ]);
}

function borderBottomColor(param) {
  return /* StringStyle */Block.__(2, [
            "borderBottomColor",
            param
          ]);
}

function borderLeftColor(param) {
  return /* StringStyle */Block.__(2, [
            "borderLeftColor",
            param
          ]);
}

function borderRadius(param) {
  return /* FloatStyle */Block.__(4, [
            "borderRadius",
            param
          ]);
}

function borderRadiusInterpolated(param) {
  return interpolatedStyle("borderRadius", param);
}

function borderTopLeftRadius(param) {
  return /* FloatStyle */Block.__(4, [
            "borderTopLeftRadius",
            param
          ]);
}

function borderTopLeftRadiusInterpolated(param) {
  return interpolatedStyle("borderTopLeftRadius", param);
}

function borderTopRightRadius(param) {
  return /* FloatStyle */Block.__(4, [
            "borderTopRightRadius",
            param
          ]);
}

function borderTopRightRadiusInterpolated(param) {
  return interpolatedStyle("borderTopRightRadius", param);
}

function borderBottomLeftRadius(param) {
  return /* FloatStyle */Block.__(4, [
            "borderBottomLeftRadius",
            param
          ]);
}

function borderBottomRightRadius(param) {
  return /* FloatStyle */Block.__(4, [
            "borderBottomRightRadius",
            param
          ]);
}

function borderStyle(v) {
  return /* StringStyle */Block.__(2, [
            "borderStyle",
            v !== 568403505 ? (
                v >= 841979626 ? "dotted" : "solid"
              ) : "dashed"
          ]);
}

function opacity(param) {
  return /* FloatStyle */Block.__(4, [
            "opacity",
            param
          ]);
}

function opacityInterpolated(param) {
  return interpolatedStyle("opacity", param);
}

function opacityAnimated(param) {
  return animatedStyle("opacity", param);
}

function elevation(param) {
  return /* FloatStyle */Block.__(4, [
            "elevation",
            param
          ]);
}

function color(param) {
  return /* StringStyle */Block.__(2, [
            "color",
            param
          ]);
}

function fontFamily(param) {
  return /* StringStyle */Block.__(2, [
            "fontFamily",
            param
          ]);
}

function fontSize(param) {
  return /* FloatStyle */Block.__(4, [
            "fontSize",
            param
          ]);
}

function fontStyle(v) {
  return /* StringStyle */Block.__(2, [
            "fontStyle",
            v >= 812216871 ? "normal" : "italic"
          ]);
}

function fontWeight(v) {
  return /* StringStyle */Block.__(2, [
            "fontWeight",
            v >= 1056105525 ? (
                v >= 1056204983 ? (
                    v >= 1056304441 ? (
                        v >= 1056354170 ? "900" : "800"
                      ) : (
                        v >= 1056254712 ? "700" : "600"
                      )
                  ) : (
                    v >= 1056155254 ? "500" : "400"
                  )
              ) : (
                v !== 812216871 ? (
                    v >= 1056006067 ? (
                        v >= 1056055796 ? "300" : "200"
                      ) : (
                        v >= 1055956338 ? "100" : "bold"
                      )
                  ) : "normal"
              )
          ]);
}

function lineHeight(param) {
  return /* FloatStyle */Block.__(4, [
            "lineHeight",
            param
          ]);
}

function textAlign(v) {
  return /* StringStyle */Block.__(2, [
            "textAlign",
            v !== -944764921 ? (
                v >= 62250832 ? (
                    v >= 98248149 ? "center" : "justify"
                  ) : (
                    v >= -379319332 ? "right" : "auto"
                  )
              ) : "left"
          ]);
}

function textDecorationLine(v) {
  return /* StringStyle */Block.__(2, [
            "textDecorationLine",
            v >= 412155569 ? (
                v >= 495568133 ? "underline line-through" : "line-through"
              ) : (
                v >= 131142924 ? "underline" : "none"
              )
          ]);
}

function textShadowColor(param) {
  return /* StringStyle */Block.__(2, [
            "textShadowColor",
            param
          ]);
}

function textShadowOffset(height, width) {
  return /* ObjectStyle */Block.__(5, [
            "textShadowOffset",
            UtilsRN$BsReactNative.dictFromArray(/* array */[
                  /* tuple */[
                    "height",
                    height
                  ],
                  /* tuple */[
                    "width",
                    width
                  ]
                ])
          ]);
}

function textShadowRadius(param) {
  return /* FloatStyle */Block.__(4, [
            "textShadowRadius",
            param
          ]);
}

function includeFontPadding(param) {
  return /* BooleanStyle */Block.__(1, [
            "includeFontPadding",
            param
          ]);
}

function textAlignVertical(v) {
  return /* StringStyle */Block.__(2, [
            "textAlignVertical",
            v >= 5793429 ? (
                v >= 98248149 ? "center" : "top"
              ) : (
                v >= -445061397 ? "bottom" : "auto"
              )
          ]);
}

function fontVariant(fontVariants) {
  return /* ArrayStyle */Block.__(0, [
            "fontVariant",
            $$Array.map((function (prim) {
                    return prim;
                  }), $$Array.of_list(fontVariants))
          ]);
}

function letterSpacing(param) {
  return /* FloatStyle */Block.__(4, [
            "letterSpacing",
            param
          ]);
}

function textDecorationColor(param) {
  return /* StringStyle */Block.__(2, [
            "textDecorationColor",
            param
          ]);
}

function textDecorationStyle(v) {
  return /* StringStyle */Block.__(2, [
            "textDecorationStyle",
            v >= 841979626 ? (
                v >= 852175633 ? "double" : "dotted"
              ) : (
                v >= 568403505 ? "dashed" : "solid"
              )
          ]);
}

function writingDirection(v) {
  return /* StringStyle */Block.__(2, [
            "writingDirection",
            v !== 5396714 ? (
                v >= 5695082 ? "rtl" : "auto"
              ) : "ltr"
          ]);
}

function resizeMode(v) {
  return /* StringStyle */Block.__(2, [
            "resizeMode",
            v !== -162316795 ? (
                v >= 108828507 ? (
                    v >= 427065300 ? "contain" : "repeat"
                  ) : (
                    v >= 98248149 ? "center" : "cover"
                  )
              ) : "stretch"
          ]);
}

function tintColor(param) {
  return /* StringStyle */Block.__(2, [
            "tintColor",
            param
          ]);
}

function overlayColor(param) {
  return /* StringStyle */Block.__(2, [
            "overlayColor",
            param
          ]);
}

function flatten(prim) {
  return prim;
}

exports.flatten = flatten;
exports.style = style;
exports.combine = combine;
exports.concat = concat;
exports.alignContent = alignContent;
exports.alignItems = alignItems;
exports.alignSelf = alignSelf;
exports.aspectRatio = aspectRatio;
exports.borderBottomWidth = borderBottomWidth;
exports.borderLeftWidth = borderLeftWidth;
exports.borderRightWidth = borderRightWidth;
exports.borderTopWidth = borderTopWidth;
exports.borderWidth = borderWidth;
exports.bottom = bottom;
exports.bottomPct = bottomPct;
exports.bottomAnimated = bottomAnimated;
exports.bottomInterpolated = bottomInterpolated;
exports.display = display;
exports.flex = flex;
exports.flexBasis = flexBasis;
exports.flexBasisPct = flexBasisPct;
exports.flexDirection = flexDirection;
exports.flexGrow = flexGrow;
exports.flexShrink = flexShrink;
exports.flexWrap = flexWrap;
exports.height = height;
exports.heightPct = heightPct;
exports.heightAnimated = heightAnimated;
exports.heightInterpolated = heightInterpolated;
exports.justifyContent = justifyContent;
exports.left = left;
exports.leftPct = leftPct;
exports.leftAnimated = leftAnimated;
exports.leftInterpolated = leftInterpolated;
exports.margin = margin;
exports.marginBottom = marginBottom;
exports.marginHorizontal = marginHorizontal;
exports.marginLeft = marginLeft;
exports.marginRight = marginRight;
exports.marginTop = marginTop;
exports.marginTopInterpolated = marginTopInterpolated;
exports.marginVertical = marginVertical;
exports.maxHeight = maxHeight;
exports.maxHeightPct = maxHeightPct;
exports.maxWidth = maxWidth;
exports.maxWidthPct = maxWidthPct;
exports.minHeight = minHeight;
exports.minHeightPct = minHeightPct;
exports.minWidth = minWidth;
exports.minWidthPct = minWidthPct;
exports.overflow = overflow;
exports.padding = padding;
exports.paddingBottom = paddingBottom;
exports.paddingHorizontal = paddingHorizontal;
exports.paddingLeft = paddingLeft;
exports.paddingRight = paddingRight;
exports.paddingTop = paddingTop;
exports.paddingVertical = paddingVertical;
exports.position = position;
exports.right = right;
exports.rightPct = rightPct;
exports.rightAnimated = rightAnimated;
exports.rightInterpolated = rightInterpolated;
exports.top = top;
exports.topPct = topPct;
exports.topAnimated = topAnimated;
exports.topInterpolated = topInterpolated;
exports.width = width;
exports.widthPct = widthPct;
exports.widthAnimated = widthAnimated;
exports.widthInterpolated = widthInterpolated;
exports.zIndex = zIndex;
exports.direction = direction;
exports.shadowColor = shadowColor;
exports.shadowOffset = shadowOffset;
exports.shadowOpacity = shadowOpacity;
exports.shadowRadius = shadowRadius;
exports.transform = transform;
exports.transformAnimated = transformAnimated;
exports.transformInterpolated = transformInterpolated;
exports.backfaceVisibility = backfaceVisibility;
exports.backgroundColor = backgroundColor;
exports.borderColor = borderColor;
exports.borderTopColor = borderTopColor;
exports.borderRightColor = borderRightColor;
exports.borderBottomColor = borderBottomColor;
exports.borderLeftColor = borderLeftColor;
exports.borderRadius = borderRadius;
exports.borderRadiusInterpolated = borderRadiusInterpolated;
exports.borderTopLeftRadius = borderTopLeftRadius;
exports.borderTopLeftRadiusInterpolated = borderTopLeftRadiusInterpolated;
exports.borderTopRightRadius = borderTopRightRadius;
exports.borderTopRightRadiusInterpolated = borderTopRightRadiusInterpolated;
exports.borderBottomLeftRadius = borderBottomLeftRadius;
exports.borderBottomRightRadius = borderBottomRightRadius;
exports.borderStyle = borderStyle;
exports.opacity = opacity;
exports.opacityAnimated = opacityAnimated;
exports.opacityInterpolated = opacityInterpolated;
exports.elevation = elevation;
exports.color = color;
exports.fontFamily = fontFamily;
exports.fontSize = fontSize;
exports.fontStyle = fontStyle;
exports.fontWeight = fontWeight;
exports.lineHeight = lineHeight;
exports.textAlign = textAlign;
exports.textDecorationLine = textDecorationLine;
exports.textShadowColor = textShadowColor;
exports.textShadowOffset = textShadowOffset;
exports.textShadowRadius = textShadowRadius;
exports.includeFontPadding = includeFontPadding;
exports.textAlignVertical = textAlignVertical;
exports.fontVariant = fontVariant;
exports.letterSpacing = letterSpacing;
exports.textDecorationColor = textDecorationColor;
exports.textDecorationStyle = textDecorationStyle;
exports.writingDirection = writingDirection;
exports.resizeMode = resizeMode;
exports.tintColor = tintColor;
exports.overlayColor = overlayColor;
/* No side effect */
