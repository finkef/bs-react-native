// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Props = require("../props.js");
var UtilsRN = require("../utilsRN.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_undefined = require("bs-platform/lib/js/js_undefined.js");
var ReactNative = require("react-native");

function make(title, badgeColor, badge, icon, onPress, renderAsOriginal, style, selected, selectedIcon, isTVSelectable, accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS) {
  var partial_arg = Props.extendView(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, {
        badgeColor: Js_undefined.from_opt(badgeColor),
        title: Js_undefined.from_opt(title),
        badge: Js_undefined.from_opt(badge),
        icon: Js_undefined.from_opt(icon),
        onPress: Js_undefined.from_opt(onPress),
        renderAsOriginal: Js_undefined.from_opt(UtilsRN.optBoolToOptJsBoolean(renderAsOriginal)),
        selected: Js_undefined.from_opt(UtilsRN.optBoolToOptJsBoolean(selected)),
        selectedIcon: Js_undefined.from_opt(selectedIcon),
        style: Js_undefined.from_opt(style),
        isTVSelectable: Js_undefined.from_opt(UtilsRN.optBoolToOptJsBoolean(isTVSelectable))
      });
  var partial_arg$1 = ReactNative.TabBarIOS.Item;
  return (function (param) {
      return ReasonReact.wrapJsForReason(partial_arg$1, partial_arg, param);
    });
}

var Item = /* module */[/* make */make];

function make$1(barTintColor, itemPositioning, style, tintColor, translucent, unselectedItemTintColor, unselectedTintColor, accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS) {
  var partial_arg = Props.extendView(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, {
        barTintColor: Js_undefined.from_opt(barTintColor),
        itemPositioning: Js_undefined.from_opt(UtilsRN.option_map((function (x) {
                    if (x !== -1011102077) {
                      if (x >= 98248149) {
                        return "center";
                      } else {
                        return "auto";
                      }
                    } else {
                      return "fill";
                    }
                  }), itemPositioning)),
        tintColor: Js_undefined.from_opt(tintColor),
        translucent: Js_undefined.from_opt(UtilsRN.optBoolToOptJsBoolean(translucent)),
        unselectedItemTintColor: Js_undefined.from_opt(unselectedItemTintColor),
        unselectedTintColor: Js_undefined.from_opt(unselectedTintColor)
      });
  var partial_arg$1 = ReactNative.TabBarIOS;
  return (function (param) {
      return ReasonReact.wrapJsForReason(partial_arg$1, partial_arg, param);
    });
}

exports.Item = Item;
exports.make = make$1;
/* ReasonReact Not a pure module */
