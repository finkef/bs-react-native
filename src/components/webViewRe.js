// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Props = require("../props.js");
var UtilsRN = require("../utilsRN.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_undefined = require("bs-platform/lib/js/js_undefined.js");
var ReactNative = require("react-native");

function make(source, style, renderError, renderLoading, onError, onLoad, onLoadEnd, onLoadStart, automaticallyAdjustContentInsets, contentInsets, accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, injectJavaScript, injectedJavaScript, mediaPlaybackRequiresUserAction, onMessage, onNavigationStateChange, scalesPageToFit, startInLoadingState, domStorageEnabled, javaScriptEnabled, mixedContentMode, thirdPartyCookiesEnabled, userAgent, allowsInlineMediaPlayback, bounces, dataDetectorTypes, decelerationRate, onShouldStartLoadWithRequest, scrollEnabled) {
  var partial_arg = Props.extendView(accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, {
        source: Js_undefined.from_opt(source),
        style: Js_undefined.from_opt(style),
        automaticallyAdjustContentInsets: Js_undefined.from_opt(automaticallyAdjustContentInsets),
        contentInsets: Js_undefined.from_opt(contentInsets),
        injectJavaScript: Js_undefined.from_opt(injectJavaScript),
        injectedJavaScript: Js_undefined.from_opt(injectedJavaScript),
        mediaPlaybackRequiresUserAction: Js_undefined.from_opt(mediaPlaybackRequiresUserAction),
        onError: Js_undefined.from_opt(onError),
        onLoad: Js_undefined.from_opt(onLoad),
        onLoadEnd: Js_undefined.from_opt(onLoadEnd),
        onLoadStart: Js_undefined.from_opt(onLoadStart),
        onMessage: Js_undefined.from_opt(onMessage),
        onNavigationStateChange: Js_undefined.from_opt(onNavigationStateChange),
        renderError: Js_undefined.from_opt(renderError),
        renderLoading: Js_undefined.from_opt(renderLoading),
        scalesPageToFit: Js_undefined.from_opt(scalesPageToFit),
        startInLoadingState: Js_undefined.from_opt(startInLoadingState),
        domStorageEnabled: Js_undefined.from_opt(domStorageEnabled),
        javaScriptEnabled: Js_undefined.from_opt(javaScriptEnabled),
        mixedContentMode: Js_undefined.from_opt(UtilsRN.option_map((function (contentMode) {
                    var to_string = function (param) {
                      if (param !== -853883856) {
                        if (param >= 422592140) {
                          return "never";
                        } else {
                          return "always";
                        }
                      } else {
                        return "compatibility";
                      }
                    };
                    return $$Array.of_list(List.map(to_string, contentMode));
                  }), mixedContentMode)),
        thirdPartyCookiesEnabled: Js_undefined.from_opt(thirdPartyCookiesEnabled),
        userAgent: Js_undefined.from_opt(userAgent),
        allowsInlineMediaPlayback: Js_undefined.from_opt(allowsInlineMediaPlayback),
        bounces: Js_undefined.from_opt(bounces),
        dataDetectorTypes: Js_undefined.from_opt(UtilsRN.option_map((function (dataDetectorType) {
                    var to_string = function (param) {
                      if (param >= -922086728) {
                        if (param >= 4847905) {
                          if (param >= 487289268) {
                            return "address";
                          } else {
                            return "all";
                          }
                        } else if (param >= -119363460) {
                          return "calendarEvent";
                        } else {
                          return "none";
                        }
                      } else if (param >= -940571433) {
                        return "phoneNumber";
                      } else {
                        return "link";
                      }
                    };
                    return $$Array.of_list(List.map(to_string, dataDetectorType));
                  }), dataDetectorTypes)),
        decelerationRate: Js_undefined.from_opt(UtilsRN.option_map((function (rate) {
                    var to_float = function (param) {
                      if (typeof param === "number") {
                        if (param >= 812216871) {
                          return 0.998;
                        } else {
                          return 0.99;
                        }
                      } else {
                        return param[1];
                      }
                    };
                    return $$Array.of_list(List.map(to_float, rate));
                  }), decelerationRate)),
        onShouldStartLoadWithRequest: Js_undefined.from_opt(onShouldStartLoadWithRequest),
        scrollEnabled: Js_undefined.from_opt(scrollEnabled)
      });
  var partial_arg$1 = ReactNative.WebView;
  return (function (param) {
      return ReasonReact.wrapJsForReason(partial_arg$1, partial_arg, param);
    });
}

function source(prim, prim$1, prim$2, prim$3, _) {
  var tmp = { };
  if (prim) {
    tmp.uri = prim[0];
  }
  if (prim$1) {
    tmp.method = prim$1[0];
  }
  if (prim$2) {
    tmp.headers = prim$2[0];
  }
  if (prim$3) {
    tmp.body = prim$3[0];
  }
  return tmp;
}

function contentInsets(prim, prim$1, prim$2, prim$3, _) {
  var tmp = { };
  if (prim) {
    tmp.top = prim[0];
  }
  if (prim$1) {
    tmp.left = prim$1[0];
  }
  if (prim$2) {
    tmp.bottom = prim$2[0];
  }
  if (prim$3) {
    tmp.right = prim$3[0];
  }
  return tmp;
}

exports.source = source;
exports.contentInsets = contentInsets;
exports.make = make;
/* ReasonReact Not a pure module */
