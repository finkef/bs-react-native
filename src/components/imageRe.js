// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var UtilsRN = require("../utilsRN.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_undefined = require("bs-platform/lib/js/js_undefined.js");
var ReactNative = require("react-native");

function CreateComponent(Impl) {
  var Event = /* module */[];
  var encodeResizeMode = function (x) {
    if (x !== -162316795) {
      if (x >= 108828507) {
        if (x >= 427065300) {
          return "contain";
        } else {
          return "repeat";
        }
      } else if (x >= 98248149) {
        return "center";
      } else {
        return "cover";
      }
    } else {
      return "stretch";
    }
  };
  var encodeSource = function (x) {
    switch (x.tag | 0) {
      case 0 : 
      case 1 : 
          return x[0];
      case 2 : 
          return $$Array.of_list(x[0]);
      
    }
  };
  var encodeResizeMethod = function (x) {
    if (x !== -120664438) {
      if (x >= 142301684) {
        return "resize";
      } else {
        return "auto";
      }
    } else {
      return "scale";
    }
  };
  var encodeDefaultSource = function (x) {
    return x[0];
  };
  var make = function (onError, onLayout, onLoad, onLoadEnd, onLoadStart, resizeMode, source, style, testID, resizeMethod, accessibilityLabel, accessible, blurRadius, capInsets, defaultSource, onPartialLoad, onProgress) {
    var partial_arg = {
      onLayout: Js_undefined.from_opt(onLayout),
      onError: Js_undefined.from_opt(onError),
      onLoad: Js_undefined.from_opt(onLoad),
      onLoadEnd: Js_undefined.from_opt(onLoadEnd),
      onLoadStart: Js_undefined.from_opt(onLoadStart),
      resizeMode: Js_undefined.from_opt(UtilsRN.option_map(encodeResizeMode, resizeMode)),
      source: Js_undefined.from_opt(UtilsRN.option_map(encodeSource, source)),
      style: Js_undefined.from_opt(style),
      testID: Js_undefined.from_opt(testID),
      resizeMethod: Js_undefined.from_opt(UtilsRN.option_map(encodeResizeMethod, resizeMethod)),
      accessibilityLabel: Js_undefined.from_opt(accessibilityLabel),
      accessible: Js_undefined.from_opt(UtilsRN.optBoolToOptJsBoolean(accessible)),
      blurRadius: Js_undefined.from_opt(blurRadius),
      capInsets: Js_undefined.from_opt(capInsets),
      defaultSource: Js_undefined.from_opt(UtilsRN.option_map(encodeDefaultSource, defaultSource)),
      onPartialLoad: Js_undefined.from_opt(onPartialLoad),
      onProgress: Js_undefined.from_opt(UtilsRN.option_map((function (x, y) {
                  return Curry._1(x, y.nativeEvent);
                }), onProgress))
    };
    var partial_arg$1 = Impl[/* view */0];
    return (function (param) {
        return ReasonReact.wrapJsForReason(partial_arg$1, partial_arg, param);
      });
  };
  return /* module */[
          (function (prim, prim$1, prim$2, prim$3, prim$4, prim$5, prim$6, prim$7, prim$8, _) {
              var tmp = {
                uri: prim
              };
              if (prim$1) {
                tmp.bundle = prim$1[0];
              }
              if (prim$2) {
                tmp.method = prim$2[0];
              }
              if (prim$3) {
                tmp.headers = prim$3[0];
              }
              if (prim$4) {
                tmp.body = prim$4[0];
              }
              if (prim$5) {
                tmp.cache = (function () {
                      switch (prim$5[0]) {
                        case 465819841 : 
                            return "default";
                        case 64967513 : 
                            return "reload";
                        case -672562089 : 
                            return "force-cache";
                        case -74546901 : 
                            return "only-if-cached";
                        
                      }
                    })();
              }
              if (prim$6) {
                tmp.scale = prim$6[0];
              }
              if (prim$7) {
                tmp.width = prim$7[0];
              }
              if (prim$8) {
                tmp.height = prim$8[0];
              }
              return tmp;
            }),
          (function (prim, prim$1, prim$2, prim$3, _) {
              var tmp = {
                uri: prim
              };
              if (prim$1) {
                tmp.scale = prim$1[0];
              }
              if (prim$2) {
                tmp.width = prim$2[0];
              }
              if (prim$3) {
                tmp.height = prim$3[0];
              }
              return tmp;
            }),
          /* Event */Event,
          /* make */make
        ];
}

var Impl = /* module */[/* Image */ReactNative.Image];

var Event = /* module */[];

function encodeResizeMode(x) {
  if (x !== -162316795) {
    if (x >= 108828507) {
      if (x >= 427065300) {
        return "contain";
      } else {
        return "repeat";
      }
    } else if (x >= 98248149) {
      return "center";
    } else {
      return "cover";
    }
  } else {
    return "stretch";
  }
}

function encodeSource(x) {
  switch (x.tag | 0) {
    case 0 : 
    case 1 : 
        return x[0];
    case 2 : 
        return $$Array.of_list(x[0]);
    
  }
}

function encodeResizeMethod(x) {
  if (x !== -120664438) {
    if (x >= 142301684) {
      return "resize";
    } else {
      return "auto";
    }
  } else {
    return "scale";
  }
}

function encodeDefaultSource(x) {
  return x[0];
}

function make(onError, onLayout, onLoad, onLoadEnd, onLoadStart, resizeMode, source, style, testID, resizeMethod, accessibilityLabel, accessible, blurRadius, capInsets, defaultSource, onPartialLoad, onProgress) {
  var partial_arg = {
    onLayout: Js_undefined.from_opt(onLayout),
    onError: Js_undefined.from_opt(onError),
    onLoad: Js_undefined.from_opt(onLoad),
    onLoadEnd: Js_undefined.from_opt(onLoadEnd),
    onLoadStart: Js_undefined.from_opt(onLoadStart),
    resizeMode: Js_undefined.from_opt(UtilsRN.option_map(encodeResizeMode, resizeMode)),
    source: Js_undefined.from_opt(UtilsRN.option_map(encodeSource, source)),
    style: Js_undefined.from_opt(style),
    testID: Js_undefined.from_opt(testID),
    resizeMethod: Js_undefined.from_opt(UtilsRN.option_map(encodeResizeMethod, resizeMethod)),
    accessibilityLabel: Js_undefined.from_opt(accessibilityLabel),
    accessible: Js_undefined.from_opt(UtilsRN.optBoolToOptJsBoolean(accessible)),
    blurRadius: Js_undefined.from_opt(blurRadius),
    capInsets: Js_undefined.from_opt(capInsets),
    defaultSource: Js_undefined.from_opt(UtilsRN.option_map(encodeDefaultSource, defaultSource)),
    onPartialLoad: Js_undefined.from_opt(onPartialLoad),
    onProgress: Js_undefined.from_opt(UtilsRN.option_map((function (x, y) {
                return Curry._1(x, y.nativeEvent);
              }), onProgress))
  };
  var partial_arg$1 = Impl[/* view */0];
  return (function (param) {
      return ReasonReact.wrapJsForReason(partial_arg$1, partial_arg, param);
    });
}

function Image_000(prim, prim$1, prim$2, prim$3, prim$4, prim$5, prim$6, prim$7, prim$8, _) {
  var tmp = {
    uri: prim
  };
  if (prim$1) {
    tmp.bundle = prim$1[0];
  }
  if (prim$2) {
    tmp.method = prim$2[0];
  }
  if (prim$3) {
    tmp.headers = prim$3[0];
  }
  if (prim$4) {
    tmp.body = prim$4[0];
  }
  if (prim$5) {
    tmp.cache = (function () {
          switch (prim$5[0]) {
            case 465819841 : 
                return "default";
            case 64967513 : 
                return "reload";
            case -672562089 : 
                return "force-cache";
            case -74546901 : 
                return "only-if-cached";
            
          }
        })();
  }
  if (prim$6) {
    tmp.scale = prim$6[0];
  }
  if (prim$7) {
    tmp.width = prim$7[0];
  }
  if (prim$8) {
    tmp.height = prim$8[0];
  }
  return tmp;
}

function Image_001(prim, prim$1, prim$2, prim$3, _) {
  var tmp = {
    uri: prim
  };
  if (prim$1) {
    tmp.scale = prim$1[0];
  }
  if (prim$2) {
    tmp.width = prim$2[0];
  }
  if (prim$3) {
    tmp.height = prim$3[0];
  }
  return tmp;
}

var Image = /* module */[
  Image_000,
  Image_001,
  /* Event */Event,
  /* make */make
];

exports.CreateComponent = CreateComponent;
exports.Image = Image;
/* Impl Not a pure module */
